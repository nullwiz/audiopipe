name: AudioPipe Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    environment: master
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10"]

    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg
          
      - name: Setup CI environment
        run: |
          echo "AUDIOPIPE_TESTING=1" >> $GITHUB_ENV
          echo "# This is a testing environment without GPU" > test/CI_ENVIRONMENT

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov edge-tts
      
      - name: Create test directories
        run: |
          mkdir -p output
          mkdir -p test/data
          
          # If test data doesn't exist, create minimal test files
          if [ ! -f "test/data/test_input.wav" ]; then
            echo "Creating minimal test data"
            python -c "
import numpy as np
from scipy.io import wavfile
# Create a simple sine wave
sample_rate = 44100
duration = 3  # seconds
t = np.linspace(0, duration, sample_rate * duration)
data = np.sin(2 * np.pi * 440 * t) * 32767  # A 440Hz sine wave
wavfile.write('test/data/test_input.wav', sample_rate, data.astype(np.int16))
"
          fi
      
      - name: Debug token availability
        run: |
          if [ -n "${{ secrets.HUGGING_FACE_TOKEN }}" ]; then
            echo "Hugging Face token is available"
          else
            echo "Hugging Face token is NOT available"
          fi
          
      - name: Run tests with Hugging Face token
        env:
          HUGGING_FACE_TOKEN: ${{ secrets.HUGGING_FACE_TOKEN }}
        run: |
          echo "HUGGING_FACE_TOKEN is set: $(if [ -n \"$HUGGING_FACE_TOKEN\" ]; then echo 'yes'; else echo 'no'; fi)"
          python -m pytest test/test_integration.py::test_audio_separation -v --integration
          python -m pytest test/test_integration.py::test_diarization -v --integration
          python -m pytest test/test_integration.py::test_transcription -v --integration
          python -m pytest test/test_integration.py::test_consolidation -v --integration

      - name: Generate coverage report
        if: matrix.python-version == '3.10'
        env:
          HUGGING_FACE_TOKEN: ${{ secrets.HUGGING_FACE_TOKEN }}
        run: |
          python -m pytest test/ --integration --cov=. --cov-report=xml
          
      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.10'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false 